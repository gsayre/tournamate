name: Node CI

on: 
  pull_request:
    branches: 
      - main
  push:
    branches:
      - feature/*


jobs:
  test_pull_request:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: Checkout
        uses: actions/checkout@v4
      - run: echo "🔧 The repository has been cloned to the runner."
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - run: echo "Package mangaer is ${{ steps.detect-package-manager.outputs.manager }}"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - run: echo "🚀 Node.js has been set up."
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
              .next/cache
            # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
            # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
              ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - run: echo "Cache has been restored "
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - run: echo "📦 Dependencies have been installed."
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.manager}} run build
      - run: echo "🏗️ Next.js has built the project."
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
      - run: echo "🚚 The artifact has been uploaded."