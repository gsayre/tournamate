generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String                     @id
  fullName             String
  isAdmin              Boolean                    @default(false)
  isTournamentDirector Boolean                    @default(false)
  playerRating         Float                      @default(1000)
  tdRequest            TournamentDirectorRequest?
  teamsParticipation   UsersInTeam[]
  tournamentDirected   Tournament[]
  invitationsSent      TeamInvitation[]           @relation("inviter")
  teamInvitations      UserInInvitation[]
  gameStatistics       GameStatistics[]

  @@fulltext([fullName])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeamInvitation {
  inviteId     Int                @id @default(autoincrement())
  inviterId    String
  tournamentId Int
  divisionId   Int
  inviter      User               @relation("inviter", fields: [inviterId], references: [id])
  invitees     UserInInvitation[]
  tournament   Tournament         @relation(fields: [tournamentId], references: [tournamentId])

  @@unique([inviteId, inviterId])
  @@index([inviterId])
  @@index([tournamentId])
}

model UserInInvitation {
  invitationId   Int
  inviteeId      String
  TeamInvitation TeamInvitation @relation(fields: [invitationId], references: [inviteId], onDelete: Cascade)
  Invitee        User           @relation(fields: [inviteeId], references: [id])

  @@id([inviteeId, invitationId])
}

model TournamentDirectorRequest {
  tdRequestId Int    @id @default(autoincrement())
  content     String
  profileId   String @unique
  user        User   @relation(fields: [profileId], references: [id])
}

model Team {
  teamId       Int           @id @default(autoincrement())
  divisionId   Int
  tournamentId Int
  poolId       String?
  teamRating   Float         @default(1000)
  poolLosses   Int           @default(0)
  poolWins     Int           @default(0)
  poolPointDifferential Int @default(0)
  division     Division      @relation(fields: [divisionId], references: [divisionId])
  tournament   Tournament    @relation(fields: [tournamentId], references: [tournamentId])
  players      UsersInTeam[]
  games        TeamInGame[]
  gamesReffed  Game[]
  pool         Pool?         @relation(fields: [poolId], references: [poolId])

  @@unique([teamId, tournamentId])
}

model UsersInTeam {
  userId String
  teamId Int
  user   User   @relation(fields: [userId], references: [id])
  Team   Team   @relation(fields: [teamId], references: [teamId], onDelete: Cascade)

  @@id([userId, teamId])
}

model Tournament {
  tournamentId         Int              @id @default(autoincrement())
  name                 String
  type                 Type
  dayOne               Boolean          @default(true)
  dayTwo               Boolean          @default(false)
  dayOneFormat         Format
  dayTwoFormat         Format?
  dayOneDate           DateTime
  dayTwoDate           DateTime?
  location             String
  tournamentDirectorId String
  dayOneStarted        Boolean          @default(false)
  dayTwoStarted        Boolean?         @default(false)
  participants         Team[]
  tournamentDirector   User             @relation(fields: [tournamentDirectorId], references: [id])
  divisions            Division[]
  teamInvitations      TeamInvitation[]

  @@unique([tournamentDirectorId, tournamentId])
}

model Division {
  divisionId   Int        @id @default(autoincrement())
  name         String
  type         String
  tournamentId Int
  isDayOf      Boolean    @default(false)
  isPoolFinshed Boolean @default(false)
  isBracketFinished Boolean @default(false)
  numBreakingPool Int @default(2)
  hasWildcards Boolean @default(false)
  numWildcards Int?
  pools        Pool[]
  entries      Team[]
  tournament   Tournament @relation(fields: [tournamentId], references: [tournamentId])
  bracket      Bracket?

  @@unique([tournamentId, type, name])
}

model Pool {
  poolId     String   @id
  isFinished Boolean @default(false)
  divisionId Int
  division   Division @relation(fields: [divisionId], references: [divisionId])
  games      Game[]
  teams      Team[]

  @@unique([poolId, divisionId])
}

model Bracket {
  bracketId  Int      @id @default(autoincrement())
  divisionId Int      @unique
  division   Division @relation(fields: [divisionId], references: [divisionId])
  games      Game[]

  @@unique([bracketId, divisionId])
}

model Game {
  gameId                Int          @id @default(autoincrement())
  refereeId             Int
  poolId                String?
  bracketId             Int?
  currentSet            Int          @default(1)
  gameFinished          Boolean      @default(false)
  nextGame  Int?
  gameOneScoreCap       Int
  gameOneTeamOneScore   Int          @default(0)
  gameOneTeamTwoScore   Int          @default(0)
  gameOrder             Int
  gameThreeScoreCap     Int?
  gameThreeTeamOneScore Int?         @default(0)
  gameThreeTeamTwoScore Int?         @default(0)
  gameTwoScoreCap       Int?
  gameTwoTeamOneScore   Int?         @default(0)
  gameTwoTeamTwoScore   Int?         @default(0)
  isScoreCapped         Boolean      @default(false)
  numSets               Int
  teams                 TeamInGame[]
  gameStatistics        GameStatistics[]
  referees              Team         @relation(fields: [refereeId], references: [teamId])
  pool                  Pool?        @relation(fields: [poolId], references: [poolId])
  bracket               Bracket?     @relation(fields: [bracketId], references: [bracketId])
}

model GameStatistics {
  id        Int     @id @default(autoincrement())
  isPool    Boolean @default(false)
  isBracket Boolean @default(false)

  wins      Int     @default(0)
  losses    Int     @default(0)
  totalGames Int    @default(0)
  aces     Int     @default(0)
  kills    Int     @default(0)
  blocks   Int     @default(0)
  hittingErrors Int @default(0)
  serviceErrors Int @default(0)
  netViolations Int @default(0)
  doubleContacts Int @default(0)
  assists Int @default(0)
  liftOrCarries Int @default(0)

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  gameId    Int
  game      Game    @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  @@unique([userId, gameId])
}

model TeamInGame {
  gameId Int
  teamId Int
  game   Game @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  Team   Team @relation(fields: [teamId], references: [teamId])

  @@id([gameId, teamId])
}

enum Format {
  NONE
  SAME_SEX_DOUBLES
  COED_DOUBLES
  REVERSE_COED_DOUBLES
  SAME_SEX_SIXES
  COED_SIXES
  REVERSE_COED_QUADS
  SAME_SEX_TRIPLES
}

enum Type {
  NONE
  GRASS
  SAND
  INDOOR
}
