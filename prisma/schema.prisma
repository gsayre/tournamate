generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id String @id @unique
  providerId String @unique
  profile Profile?
  teamsParticipation UsersInTeam[]
  tournamentDirected Tournament[] @relation("tournamentDirected")
}

model Profile {
  profileId Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  tournamentDirector Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  tdRequest TournamentDirectorRequests?
}

model Team {
  teamId Int @id @default(autoincrement())
  division Division @relation(fields: [divisionId], references: [divisionId])
  divisionId Int
  tournament Tournament @relation(fields: [tournamentId], references: [tournamentId])
  tournamentId Int
  players UsersInTeam[]
  games TeamInGame[]
  gamesReffed Game[]
  pool Pool @relation(fields: [poolId], references: [poolId])
  poolId Int
  @@unique([teamId, tournamentId])
}

model UsersInTeam {
  user User @relation(fields: [userId], references: [id])
  userId String
  Team Team @relation(fields: [teamId], references: [teamId])
  teamId Int
  @@id([userId, teamId])
}


model Tournament {
  tournamentId Int @id @default(autoincrement())
  name String
  type String
  dayOne               Boolean     @default(true)
  dayTwo               Boolean?     @default(false)
  dayOneFormat         String     @default("")
  dayTwoFormat         String?     @default("")
  participants Team[] 
  tournamentDirector User @relation(name: "tournamentDirected",fields: [tournamentDirectorId], references: [id])
  tournamentDirectorId String 
  divisions Division[]
  @@unique([tournamentDirectorId, name])
}

model Division {
  divisionId Int @id @default(autoincrement())
  pools Pool[]
  entries Team[]
  tournament Tournament @relation(fields: [tournamentId], references: [tournamentId])
  tournamentId Int
  bracket Bracket?
  
}

model Pool {
  poolId Int @id @default(autoincrement())
  division Division @relation(fields: [divisionId], references: [divisionId])
  divisionId Int
  games Game[]
  teams Team[]
}

model Bracket {
  bracketId Int @id @default(autoincrement())
  division Division @relation(fields: [divisionId], references: [divisionId])
  divisionId Int @unique
  games Game[]
}

model Game {
  gameId Int @id @default(autoincrement())
  teams TeamInGame[] 
  referees Team @relation( fields: [refereeId], references: [teamId])
  refereeId Int 
  pool Pool @relation(fields: [poolId], references: [poolId])
  poolId Int
  bracket Bracket? @relation(fields: [bracketId], references: [bracketId])
  bracketId Int
}

model TeamInGame {
  game Game @relation(fields: [gameId], references: [gameId])
  gameId Int
  Team Team @relation(fields: [teamId], references: [teamId])
  teamId Int
  @@id([gameId,teamId])
}

model TournamentDirectorRequests {
  tdRequestId Int @id @default(autoincrement())
  content String
  user Profile @relation(fields: [profileId], references: [userId])
  profileId String @unique
}